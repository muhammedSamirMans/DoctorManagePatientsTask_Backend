{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/patients/services/patientcrudservice.service\";\nimport * as i2 from \"@angular/router\";\nexport class EditComponent {\n  /*------------------------------------------\r\n  --------------------------------------------\r\n  Created constructor\r\n  --------------------------------------------\r\n  --------------------------------------------*/\n  constructor(patientService, route, router) {\n    this.patientService = patientService;\n    this.route = route;\n    this.router = router;\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  ngOnInit() {\n    this.id = this.route.snapshot.params['postId'];\n    this.patientService.getById(this.id).subscribe(data => {\n      this.patient = data.data;\n    });\n    this.form = new FormGroup({\n      id: new FormControl('', [Validators.required]),\n      pasNumber: new FormControl('', [Validators.required]),\n      forenames: new FormControl('', Validators.required),\n      surname: new FormControl('', Validators.required),\n      dateOfBirth: new FormControl('', Validators.required),\n      sexCode: new FormControl('', Validators.required),\n      homeTelephoneNumber: new FormControl('', Validators.required),\n      nokName: new FormControl('', Validators.required),\n      nokRelationshipCode: new FormControl('', Validators.required),\n      nokAddressLine1: new FormControl('', Validators.required),\n      nokAddressLine2: new FormControl('', Validators.required),\n      nokAddressLine3: new FormControl('', Validators.required),\n      nokAddressLine4: new FormControl('', Validators.required),\n      nokPostcode: new FormControl('', Validators.required),\n      gpCode: new FormControl('', Validators.required),\n      gpSurname: new FormControl('', Validators.required),\n      gpInitials: new FormControl('', Validators.required),\n      gpPhone: new FormControl('', Validators.required)\n    });\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  get f() {\n    return this.form.controls;\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  submit() {\n    console.log(this.form.value);\n    this.patientService.submit(this.form.value).subscribe(res => {\n      console.log('Post updated successfully!');\n      this.router.navigateByUrl('post/index');\n    });\n  }\n}\nEditComponent.ɵfac = function EditComponent_Factory(t) {\n  return new (t || EditComponent)(i0.ɵɵdirectiveInject(i1.PatientcrudserviceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\nEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditComponent,\n  selectors: [[\"app-edit\"]],\n  decls: 2,\n  vars: 0,\n  template: function EditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"edit works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","EditComponent","constructor","patientService","route","router","ngOnInit","id","snapshot","params","getById","subscribe","data","patient","form","required","pasNumber","forenames","surname","dateOfBirth","sexCode","homeTelephoneNumber","nokName","nokRelationshipCode","nokAddressLine1","nokAddressLine2","nokAddressLine3","nokAddressLine4","nokPostcode","gpCode","gpSurname","gpInitials","gpPhone","f","controls","submit","console","log","value","res","navigateByUrl","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["G:\\Interviews\\DoctorManagePatientsTask\\DoctorManagePatientsTask_Frontend\\src\\app\\patients\\patient\\edit\\edit.component.ts","G:\\Interviews\\DoctorManagePatientsTask\\DoctorManagePatientsTask_Frontend\\src\\app\\patients\\patient\\edit\\edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators} from '@angular/forms'; \nimport { PatientcrudserviceService } from 'src/app/patients/services/patientcrudservice.service';\nimport Swal from 'sweetalert2';\nimport { Patient } from '../../interfaces/patient';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.scss']\n})\nexport class EditComponent implements OnInit {\n      \n  id!: number;\n  patient!: Patient;\n  form!: FormGroup;\n    \n  /*------------------------------------------\n  --------------------------------------------\n  Created constructor\n  --------------------------------------------\n  --------------------------------------------*/\n  constructor(\n    public patientService: PatientcrudserviceService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) { }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  ngOnInit(): void {\n    this.id = this.route.snapshot.params['postId'];\n    this.patientService.getById(this.id).subscribe((data: any)=>{\n      this.patient = data.data;\n    }); \n      \n    this.form = new FormGroup({\n      id: new FormControl('', [Validators.required]),\n      pasNumber: new FormControl('', [Validators.required]),\n      forenames: new FormControl('', Validators.required),\n      surname: new FormControl('', Validators.required),\n      dateOfBirth: new FormControl('', Validators.required),\n      sexCode: new FormControl('', Validators.required),\n      homeTelephoneNumber: new FormControl('', Validators.required),\n      nokName: new FormControl('', Validators.required),\n      nokRelationshipCode: new FormControl('', Validators.required),\n      nokAddressLine1: new FormControl('', Validators.required),\n      nokAddressLine2: new FormControl('', Validators.required),\n      nokAddressLine3: new FormControl('', Validators.required),\n      nokAddressLine4: new FormControl('', Validators.required),\n      nokPostcode: new FormControl('', Validators.required),\n      gpCode: new FormControl('', Validators.required),\n      gpSurname: new FormControl('', Validators.required),\n      gpInitials: new FormControl('', Validators.required),\n      gpPhone: new FormControl('', Validators.required)\n    });\n  }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  get f(){\n    return this.form.controls;\n  }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  submit(){\n    console.log(this.form.value);\n    this.patientService.submit(this.form.value).subscribe((res:any) => {\n         console.log('Post updated successfully!');\n         this.router.navigateByUrl('post/index');\n    })\n  }\n\n}\n","<p>edit works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}